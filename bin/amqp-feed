#! /usr/bin/env ruby
#
# @abstract Poor Man's version of a FlightAware client
#
# @author Ollivier Robert <ollivier.robert@eurocontrol.int>
# @copyright 2015 by Ollivier Robert for ECTL
#

# Usual housekeeping variables
BASEDIR = File.dirname(File.expand_path($0))
$LOAD_PATH << File.join(BASEDIR, '..', 'lib')

# Standard modules
require 'openssl'

# Setup things
require 'flightaware/client'
require 'config'

# Qpid link
require 'qpid_proton'

# Default config file
DEF_CONFIG = File.join(ENV['HOME'], '.flightaware', 'config.yml')

trap(:INT) { $stderr.puts("INT: stopping..."); @sigint = 1 }
trap(:TERM) { $stderr.puts("TERM: stopping..."); @sigterm = 1 }

# Setup AMQP
def setup_amqp(config)
  if config.topic
    topic = "#{config.type}://#{config.broker}/#{config.topic}"
    puts("Creating AMQP writing queue #{topic}")
    amqp = Qpid::Proton::Messenger.new
    amqp.start
    return amqp, topic
  end
end

# Do something
def main(argv)
  config = MyConfig.load(DEF_CONFIG)

  amqp, topic = setup_amqp(config)
  msg = Qpid::Proton::Message.new
  #  Our callback to receive from FA and push to AMQP
  #
  feed_one = Proc.new {|buf|
    msg.creation_time = Time.now.to_i
    msg.content_type = 'application/json'
    msg.format = Qpid::Proton::MessageFormat::JSON
    msg['sent'] = Time.now.to_s

    msg.address = topic
    msg.subject = "FA pkt##{@pkts}"
    msg.body = buf
    begin
      amqp.put(msg)
      amqp.send
    rescue Qpid::Proton::ProtonError => error
      $stderr.puts("ERROR: #{error.message}")
      exit
    end
    $stderr.print(".")
  }

  config.feed_one = feed_one
  fa = FlightAware::Client.new(config)
  loop {
    if @sigint or @sigterm
      $stderr.puts("#{fa.pkts} packets received, #{fa.bytes} bytes.")
      break
    end
    fa.run
  }
end

if __FILE__ == $0
  exit(main(ARGV) || 1)
end
