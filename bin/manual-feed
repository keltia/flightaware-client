#! /usr/bin/env ruby
#
# @abstract Manually inject JSON record into AMQP
#
# @author Ollivier Robert <ollivier.robert@eurocontrol.int>
# @copyright 2015 by Ollivier Robert for ECTL
#

# Usual housekeeping variables
BASEDIR = File.dirname(File.expand_path($0))
$LOAD_PATH << File.join(BASEDIR, '..', 'lib')

# Standard modules
require 'openssl'
require 'optparse'

# Setup things
require 'config'

# Qpid link
require 'qpid_proton'

# Default config file
DEF_CONFIG = File.join(ENV['HOME'], '.flightaware', 'config.yml')

trap(:INT) { $stderr.puts("INT: stopping..."); @sigint = 1 }
trap(:TERM) { $stderr.puts("TERM: stopping..."); @sigterm = 1 }

# Setup AMQP
def setup_amqp(config, dest)
  dst = config.dests[dest] || config.dests[config.default]
  if dst
    topic = "#{dst['type']}://#{dst['broker']}/#{dst['name']}"
    puts("Creating AMQP writing queue #{topic}")
    amqp = Qpid::Proton::Messenger.new
    amqp.start
    return amqp, topic
  end
end

# Do something
def main(argv)
  # Default dest
  def_dest = nil

  # File to read from
  read_from = nil

  pkts = 0
  config = MyConfig.load(DEF_CONFIG)

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-C config] file

Default is first configuration in #{DEF_CONFIG}
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner

    opts.on('-C', '--config=NAME', 'Load this particular destination.') do
    |opt_dest|
      def_dest = opt_dest
    end

    opts.on('-h', '--help', 'This help message.') do
      puts opts.help
      puts("\nPossible destinations:")
      puts("%-10s %-40s" % ["Name", "Destination"])
      puts("%-10s %-40s" % ["----------", "---------------------------------------------"])
      config.dests.each{|n,v|
        puts("%-10s %-40s" % [ n, "#{v['type']}://#{v['broker']}/#{v['name']}" ])
      }
      return 255
    end
    opts.parse!
  end

  argv.options = nil
  read_from = argv.shift

  if read_from.nil?
    $stderr.puts("Error: you must specify a file to read from!")
    return 255
  end

  $stderr.puts("Reading from #{read_from}")
  if read_from == '-'
    all = $stdin.readlines
  else
    all = File.open(read_from, "r").readlines
  end
  $stderr.puts("  Read #{all.size} records")

  amqp, topic = setup_amqp(config, def_dest)

  # One instance is enough
  #
  msg = Qpid::Proton::Message.new
  me = %x{hostname}

  # Generate and send
  #
  all.each do |line|
    msg.address = topic
    msg.subject = "FA pkt##{pkts}"
    msg.creation_time = Time.now.to_i
    msg.content_type = 'application/json'
    msg.format = Qpid::Proton::MessageFormat::JSON
    msg['sent'] = Time.now.to_s
    msg['hostname'] = me
    msg.body = line.chomp.dup
    begin
      amqp.put(msg)
      pkts += 1
    rescue Qpid::Proton::ProtonError => error
      $stderr.puts("ERROR: #{error.message}")
      exit
    end
    $stderr.print(".")
  end

  # Flush queue
  amqp.send
  0
end

if __FILE__ == $0
  exit(main(ARGV) || 1)
end
